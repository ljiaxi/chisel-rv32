
boot.elf:     file format elf32-littleriscv
boot.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000098

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000120 memsz 0x00000120 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .loader       00000120  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .riscv.attributes 0000001a  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY
  2 .debug_line   00000183  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000022  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000012  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000028  00000000  00000000  000012f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    0000004b  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_ranges 00000020  00000000  00000000  00001370  2**3
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .loader	00000000 .loader
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 boot.o
00000040 l       .loader	00000000 reset
00000070 l       .loader	00000000 trap
00000078 l       .loader	00000000 loop
00000080 l       .loader	00000000 spin
000000a0 l       .loader	00000000 size0
000000bc l       .loader	00000000 size1
000000dc l       .loader	00000000 read
00000118 l       .loader	00000000 done
000000e8 l       .loader	00000000 word
000000ec l       .loader	00000000 byte
00010000 g       .loader	00000000 _fdata
80002000 g       *ABS*	00000000 _gpio
00000400 g       .loader	00000000 _etext
00010000 g       .loader	00000000 _gp
00000400 g       .loader	00000000 _ftext
00000098 g       .loader	00000000 _start
80000000 g       *ABS*	00000000 _uart
00010000 g       .loader	00000000 _edata
00010000 g       .loader	00000000 _end
00020000 g       *ABS*	00000000 _stack
80001000 g       *ABS*	00000000 _timer
00010000 g       .loader	00000000 _fbss



Disassembly of section .loader:

00000000 <reset-0x40>:
    .section .vector, "ax"
    .align 5

    j    reset
   0:	0400006f          	j	40 <reset>
    j    trap
   4:	06c0006f          	j	70 <trap>
	...

00000040 <reset>:
    .section .loader, "ax"
    .align 5
    .globl _start

reset:
    la   s0,_gpio    # GPIO initialization
  40:	80002417          	auipc	s0,0x80002
  44:	fc040413          	addi	s0,s0,-64 # 80002000 <_gpio+0x0>
    li   t0,-1
  48:	fff00293          	li	t0,-1
    slli t0,t0,16
  4c:	01029293          	slli	t0,t0,0x10
    sw   t0,4(s0)
  50:	00542223          	sw	t0,4(s0)
    la   s1,_uart    # UART initialization
  54:	80000497          	auipc	s1,0x80000
  58:	fac48493          	addi	s1,s1,-84 # 80000000 <_gpio+0xffffe000>
    li   t0,0x13
  5c:	01300293          	li	t0,19
    sw   t0,0xC(s1)
  60:	0054a623          	sw	t0,12(s1)
    la   sp,_stack   # Initialize stack pointer
  64:	00020117          	auipc	sp,0x20
  68:	f9c10113          	addi	sp,sp,-100 # 20000 <_stack>
    j    _start
  6c:	02c0006f          	j	98 <_start>

00000070 <trap>:

trap:
    li   t1,0x8
  70:	00800313          	li	t1,8
    li   t3,4
  74:	00400e13          	li	t3,4

00000078 <loop>:
loop:
    addi t3,t3,-1
  78:	fffe0e13          	addi	t3,t3,-1
    lui  t4,0x200
  7c:	00200eb7          	lui	t4,0x200

00000080 <spin>:
spin:
    addi t4,t4,-1
  80:	fffe8e93          	addi	t4,t4,-1 # 1fffff <_stack+0x1dffff>
    bne  t4,zero,spin
  84:	fe0e9ee3          	bnez	t4,80 <spin>
    slli t1,t1,3
  88:	00331313          	slli	t1,t1,0x3
    sw   t1,0(t0)
  8c:	0062a023          	sw	t1,0(t0)
    bne  t3,zero,loop
  90:	fe0e14e3          	bnez	t3,78 <loop>
    j    trap
  94:	fddff06f          	j	70 <trap>

00000098 <_start>:

_start:
    li   t0,1             # Turn on first LED
  98:	00100293          	li	t0,1
    sw   t0,0(s0)
  9c:	00542023          	sw	t0,0(s0)

000000a0 <size0>:
size0:
    lw   t0,8(s1)         # Loop until read first byte of program size
  a0:	0084a283          	lw	t0,8(s1)
    andi t0,t0,1
  a4:	0012f293          	andi	t0,t0,1
    beq  t0,zero,size0
  a8:	fe028ce3          	beqz	t0,a0 <size0>
    lw   t0,0(s1)
  ac:	0004a283          	lw	t0,0(s1)
    slli t0,t0,8
  b0:	00829293          	slli	t0,t0,0x8
    li   t0,2             # Turn on second LED
  b4:	00200293          	li	t0,2
    sw   t0,0(s0)
  b8:	00542023          	sw	t0,0(s0)

000000bc <size1>:
size1:
    lw   t1,8(s1)         # Loop until read second byte of program size
  bc:	0084a303          	lw	t1,8(s1)
    andi t1,t1,1
  c0:	00137313          	andi	t1,t1,1
    beq  t1,zero,size1
  c4:	fe030ce3          	beqz	t1,bc <size1>
    lw   t1,0(s1)
  c8:	0004a303          	lw	t1,0(s1)
    or   t1,t0,t1
  cc:	0062e333          	or	t1,t0,t1
    li   t0,4
  d0:	00400293          	li	t0,4
    sw   t0,0(s0)         # Turn on third LED
  d4:	00542023          	sw	t0,0(s0)
    la   s2,_ftext        # Read binary program from UART
  d8:	40000913          	li	s2,1024

000000dc <read>:
read:
    beq  t1,zero,done
  dc:	02030e63          	beqz	t1,118 <done>
    li   t2,4
  e0:	00400393          	li	t2,4
    li   t3,0
  e4:	00000e13          	li	t3,0

000000e8 <word>:
word:
    addi t2,t2,-1
  e8:	fff38393          	addi	t2,t2,-1

000000ec <byte>:
byte:
    lw   t4,8(s1)         # Loop and read byte when available
  ec:	0084ae83          	lw	t4,8(s1)
    andi t4,t4,1
  f0:	001efe93          	andi	t4,t4,1
    beq  t4,zero,byte
  f4:	fe0e8ce3          	beqz	t4,ec <byte>
    lw   t4,0(s1)
  f8:	0004ae83          	lw	t4,0(s1)
    slli t3,t3,8          # Append byte to word
  fc:	008e1e13          	slli	t3,t3,0x8
    or   t3,t3,t4
 100:	01de6e33          	or	t3,t3,t4
    bne  t2,zero,word     # Read until four bytes are recieved
 104:	fe0392e3          	bnez	t2,e8 <word>
    sw   t3,0(s2)         # Store word in text section
 108:	01c92023          	sw	t3,0(s2)
    addi s2,s2,4          # Increment counters
 10c:	00490913          	addi	s2,s2,4
    addi t1,t1,-1
 110:	fff30313          	addi	t1,t1,-1
    j    read
 114:	fc9ff06f          	j	dc <read>

00000118 <done>:
done:
    sw   zero,0(s0)
 118:	00042023          	sw	zero,0(s0)
    j    _ftext
 11c:	2e40006f          	j	400 <_etext>
