
testbench.elf:     file format elf32-littleriscv
testbench.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000c4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000184 memsz 0x00000184 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .loader       00000184  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .riscv.attributes 0000001a  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY
  2 .debug_line   000001f4  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000022  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000012  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000028  00000000  00000000  000013c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    0000005a  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_ranges 00000020  00000000  00000000  00001450  2**3
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .loader	00000000 .loader
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 testbench.o
00000040 l       .loader	00000000 reset
000000c0 l       .loader	00000000 trap
00000154 l       .loader	00000000 l1
00010000 g       .loader	00000000 _fdata
80002000 g       *ABS*	00000000 _gpio
00000400 g       .loader	00000000 _etext
00010000 g       .loader	00000000 _gp
00000400 g       .loader	00000000 _ftext
000000c4 g       .loader	00000000 _start
80000000 g       *ABS*	00000000 _uart
00010000 g       .loader	00000000 _edata
00010000 g       .loader	00000000 _end
00020000 g       *ABS*	00000000 _stack
80001000 g       *ABS*	00000000 _timer
00010000 g       .loader	00000000 _fbss



Disassembly of section .loader:

00000000 <reset-0x40>:
    .section .vector, "ax"
    .align 5

    j    reset
   0:	0400006f          	j	40 <reset>
    j    trap
   4:	0bc0006f          	j	c0 <trap>
	...

00000040 <reset>:
    .section .loader, "ax"
    .align 5
    .global _start

reset:
    li x1, 0
  40:	00000093          	li	ra,0
    li x2, 0
  44:	00000113          	li	sp,0
    li x3, 0
  48:	00000193          	li	gp,0
    li x4, 0
  4c:	00000213          	li	tp,0
    li x5, 0
  50:	00000293          	li	t0,0
    li x6, 0
  54:	00000313          	li	t1,0
    li x7, 0
  58:	00000393          	li	t2,0
    li x8, 0
  5c:	00000413          	li	s0,0
    li x9, 0
  60:	00000493          	li	s1,0
    li x10, 0
  64:	00000513          	li	a0,0
    li x11, 0
  68:	00000593          	li	a1,0
    li x12, 0
  6c:	00000613          	li	a2,0
    li x13, 0
  70:	00000693          	li	a3,0
    li x14, 0
  74:	00000713          	li	a4,0
    li x15, 0
  78:	00000793          	li	a5,0
    li x16, 0
  7c:	00000813          	li	a6,0
    li x17, 0
  80:	00000893          	li	a7,0
    li x18, 0
  84:	00000913          	li	s2,0
    li x19, 0
  88:	00000993          	li	s3,0
    li x20, 0
  8c:	00000a13          	li	s4,0
    li x21, 0
  90:	00000a93          	li	s5,0
    li x22, 0
  94:	00000b13          	li	s6,0
    li x23, 0
  98:	00000b93          	li	s7,0
    li x24, 0
  9c:	00000c13          	li	s8,0
    li x25, 0
  a0:	00000c93          	li	s9,0
    li x26, 0
  a4:	00000d13          	li	s10,0
    li x27, 0
  a8:	00000d93          	li	s11,0
    li x28, 0
  ac:	00000e13          	li	t3,0
    li x29, 0
  b0:	00000e93          	li	t4,0
    li x30, 0
  b4:	00000f13          	li	t5,0
    li x31, 0
  b8:	00000f93          	li	t6,0
    j _start
  bc:	0080006f          	j	c4 <_start>

000000c0 <trap>:

trap:
    j .
  c0:	0000006f          	j	c0 <trap>

000000c4 <_start>:

_start:
    # Test execute and memory forwarding
    li  t0,-1
  c4:	fff00293          	li	t0,-1
    li  t1, 6
  c8:	00600313          	li	t1,6
    add t2,t0,t1
  cc:	006283b3          	add	t2,t0,t1

    # Test memory and writeback forwarding
    li  t0, 4
  d0:	00400293          	li	t0,4
    li  t1, 5
  d4:	00500313          	li	t1,5
    nop
  d8:	00000013          	nop
    add t2,t0,t1
  dc:	006283b3          	add	t2,t0,t1

    # Test timer
    la   t0,_timer
  e0:	80001297          	auipc	t0,0x80001
  e4:	f2028293          	addi	t0,t0,-224 # 80001000 <_gpio+0xfffff000>
    li   t1,1
  e8:	00100313          	li	t1,1
    sw   t1,4(t0)
  ec:	0062a223          	sw	t1,4(t0)

    # Test store and load
    la   t0,_fdata
  f0:	00010297          	auipc	t0,0x10
  f4:	f1028293          	addi	t0,t0,-240 # 10000 <_edata>
    li   t1,1
  f8:	00100313          	li	t1,1
    sw   t1,0(t0)
  fc:	0062a023          	sw	t1,0(t0)
    lw   t2,0(t0)
 100:	0002a383          	lw	t2,0(t0)
    andi t3,t2,2
 104:	0023fe13          	andi	t3,t2,2

    # test UART.SCR
    la   t0,_uart
 108:	80000297          	auipc	t0,0x80000
 10c:	ef828293          	addi	t0,t0,-264 # 80000000 <_gpio+0xffffe000>
    li   t1,0xA5
 110:	0a500313          	li	t1,165
    sb   t1,7(t0)
 114:	006283a3          	sb	t1,7(t0)
    # set 8n1
    li   t1,0x3
 118:	00300313          	li	t1,3
    sb   t1,3(t0)
 11c:	006281a3          	sb	t1,3(t0)
    // send byte
    li   t2,'h'
 120:	06800393          	li	t2,104
    sb   t2,0(t0)
 124:	00728023          	sb	t2,0(t0)
    li   t2,'e'
 128:	06500393          	li	t2,101
    sb   t2,0(t0)
 12c:	00728023          	sb	t2,0(t0)
    li   t2,'l'
 130:	06c00393          	li	t2,108
    sb   t2,0(t0)
 134:	00728023          	sb	t2,0(t0)
    li   t2,'l'
 138:	06c00393          	li	t2,108
    sb   t2,0(t0)
 13c:	00728023          	sb	t2,0(t0)
    li   t2,'o'
 140:	06f00393          	li	t2,111
    sb   t2,0(t0)
 144:	00728023          	sb	t2,0(t0)
    li   t2,'\n'
 148:	00a00393          	li	t2,10
    sb   t2,0(t0)
 14c:	00728023          	sb	t2,0(t0)
    // wait print
    li   t1,10
 150:	00a00313          	li	t1,10

00000154 <l1>:
l1: addi t1,t1,-1
 154:	fff30313          	addi	t1,t1,-1
    bne  t1,x0,l1
 158:	fe031ee3          	bnez	t1,154 <l1>
    // finish
    li   t2,0xFF
 15c:	0ff00393          	li	t2,255
    sb   t2,7(t0)
 160:	007283a3          	sb	t2,7(t0)

    j   .
 164:	0000006f          	j	164 <l1+0x10>
	...
